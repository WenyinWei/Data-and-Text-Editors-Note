Title         : Probability & Statistics & R

Author        : You
Affiliation   : Research institute
Email         : you@bar.com

Bibliography  : example.bib
Package       : url
[INCLUDE=book]
[INCLUDE=webtoc]
[INCLUDE=webanchors]

[TITLE]

~ Begin SidePanel
[TOC]
~ End SidePanel

~ Begin MainPanel

Some famous websites exhibiting beautiful data are as follow:

- Nathan Yau's Blog [Flowing Data] and his book _Data Points_
- _R for Data Science_.  
- _The Elements of Statistical Learning_.(free)
- _An Introduction to Statistical Learning_.(free)
- _Doing Bayesian Data Analysis_.(free)
- _Forecasting Principles and Practices_.(free)
- A fantastic online website for learning Python and R, [DataCamp].
[DataCamp]:https://www.datacamp.com/onboarding#
[Flowing Data]: https://flowingdata.com/

# Probability
***
# Statistics
***
# R Language
***
## Installation


Basic installation could cite this website [@Install].

Installing packages and detaching them are convenient in Visual Studio.
```
library("whatever")
library("whatever", lib.loc = "~/Rlib")
require("whatever")
detach("package:whatever")
install.packages("whatever")
```
library function and require function are not the same on some ways. Library function load the package no matter where it has been loaded, while require function do it if necessary. Their return values are the name of package or error; True or False.

Devtools is a good tool to help installing packages.
## System Operation

```
# If you want to check out the contents of the workspace, you can type ls() function in the console.
ls()

# It is a funciton extract an overview of the input.
summary()

script.dir <- dirname(sys.frame(1)$ofile)
setwd(script.dir)
# set the current work directory where the file is.
```

## Data Structure
This part is mainly from [@DataStru].
### Subjects and Attributes

#### Five Classes of Subjects:

- character,"hello,world"
- numeric, 3 or 3.1415926
- integer, 1,2,3
- complex, 1+2i
- logical,TRUE/FALSE

The basic operations are as follow:
```
> x <- 1      # 将1赋值给x
> class(x)    # 使用class()函数查看x的类型
[1] "numeric" # x是整数1，但类型是数值

> y <- 3.14
> class(y)
[1] "numeric" # y是小数，类型仍是数值

> z <- 2L # 将2赋值给z，通过L限定z的类型为整数
> class(z)
[1] "integer" # z的类型是整数

> m <- "hello world" # 赋值字符时，需加""
> class(m)
[1] "character" # m的类型为字符

> t <- TRUE
> class(t)
[1] "logical" # t的类型为逻辑

> n <- 1+2i
> class(n)
[1] "complex" # n的类型为复数
```
#### Attributes
- name 

This attribute could be succeeded to next variable such as fruits_number > 0 is also a vector with the same names of elements (kinds of fruits), but in boolean type.

- dimensions：matrix，array
- class
- length

#### Arithmetic
- +, -, * , / ,^ are usual form. %% means the modulo.
- <, <=, >=, >, ==, != are comparison operators.

- sum() function adds all elements of a vector together.

- mean() function finds the mean magnitude of the elements in a vector.

#### Relational Operators
Relational operators adapt to most of data type, including matrices and vectors.

#### Operators
- & and.
- | or.
- ! negate.

### Vector
#### How to construct a vector
- Basic Building Approach
```
> x3 <- 1:10 #将1到10的整数赋值给向量x3
> x3 #打印出x3中的元素
[1] 1 2 3 4 5 6 7 8 9 10
> class(x3)
[1] "integer" #查看x3中元素的类型，为整数型
```

- vector() Function Builds A Specified Length Null Vector.
```
> x1 <- vector(mode = "character", length = 10) # 创建一个长度为10的字符型空向量
> class(x1)
[1] "character" # 查看x1的类型，确实为字符型
> x2 <- vector("numeric",15) # 创建一个长度为15的数值型空向量
> class(x2)
[1] "numeric" # 查看x2的类型，确实为数值型
```




- c() Function Builds A Specified Vector with Specified Elements. 
```
> x5 <- c(1,2,3,4,5) # 创建向量x5，包含1到55个元素
> x5 # 打印x5的元素
[1] 1 2 3 4 5
> class(x5)
[1] "numeric" # 查看向量x5的类型，为数值型
```
The type of elements in a vector must be consistent. R will transform the element types into one when using c() function to build a vector whose elements' types are different.
```
> x6 <- c(1,23,TRUE,"hello,world") #创建含有不同类型元素的向量
> x6
[1] "1" "23" "TRUE" "hello,world" # 打印出的x6全是字符
> class(x6)
[1] "character" #显示x6中的元素全是字符型，说明R自动将数值型和逻辑型元素都转换为字符型。
```

#### Constraint Transform Subject Type in a Vector

```
> x7 <- c(1,2,3,5,6,7) #创建数值型向量
> class(x7)
[1] "numeric"
> as.character(x7) # 使用as.as.character()函数将x7中的元素转换成字符型
[1] "1" "2" "3" "5" "6" "7"
> class(x7)
[1] "numeric" # x7中的元素全部被转换成字符型
```
Constraint transform functions include: as.logical, as.numeric    .

#### Attributes

```
> x8 <- c(2,4,6,8,10) # 创建数值型向量
> x8
[1] 2 4 6 8 10
> names(x8) <- c("a","b","c","d","e") # 给向量x8添加名称
> x8 # 成功为向量中的每一个元素添加名称
a b c d e
2 4 6 8 10
```

The most common attribute of vectors is type, class() can check the type of a vector. names() function can add names for elements of the vectors.

### Matrix
#### Build and Name a Matrix
The following code writes a matrix arranged by three rows, with the sequence of 1:9.
```
my_matrix = matrix(1:9, byrow = TRUE, nrow = 3)

# Similar name regulation.
rownames(my_matrix) <- row_names_vector
colnames(my_matrix) <- col_names_vector

# Sums, not Sum. 
rowSums(my_matrix)
colSums(my_matrix)

# You can add a column or multiple columns to a matrix with the cbind() function.
big_matrix <- cbind(matrix1, matrix2, vector1 ...)
big_matrix2<- rbind(matrix1, matrix2, vector2 ...
```
#### Selection
Select part from the matrix. If pick a vector from a matrix, the vector appears as a vector rather than a 1 * n matrix.
```
my_matrix[1,2] # selects the element at the first row and second column.
my_matrix[1:3,2:4] # are similar to Mathematica.

my_matrix[,1] # selects all elements of the first column.
my_matrix[1,] # selects all elements of the first row.
```
#### Arithmetic
- A * B is the element-element multiplication. 
- A %*% B is the standard matrix multiplication.

### Factor
Factors are variables with limited alternatives, such as sex. Categories mean "factor level" in R language.
Function factor() extract all kinds of possible values from the vector.
```
# Sex vector
sex_vector <- c("Male", "Female", "Female", "Male", "Male")

# Convert sex_vector to a factor
factor_sex_vector <-factor(sex_vector)

# Print out factor_sex_vector
factor_sex_vector
[1] Male Female Female Male Male  
Levels: Female Male
```
#### Order
There are two kinds of categorical variables: nominal categorical variables and ordinal categorical variables.
```
# Animals
animals_vector <- c("Elephant", "Giraffe", "Donkey", "Horse")
factor_animals_vector <- factor(animals_vector)
factor_animals_vector
[1] High   Low    High   Low    Medium
Levels: Low < Medium < High

# Temperature
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c("Low", "Medium", "High"))
factor_temperature_vector
[1] High   Low    High   Low    Medium
Levels: Low < Medium < High
```
#### Change
It is convenient to substitute "levels" in R, just assigning levels() a new list. Notwithstanding, take care of the automatic sequence alphabetically.
```
> # Code to build factor_survey_vector
> survey_vector <- c("M", "F", "F", "M", "M")
> factor_survey_vector <- factor(survey_vector)
> factor_survey_vector
[1] M F F M M
Levels: F M
> # Specify the levels of factor_survey_vector
> levels(factor_survey_vector) <-c("Female","Male")
> 
> factor_survey_vector
[1] Male   Female Female Male   Male  
Levels: Female Male
```

### List

List can include varieties of variables, being a super type data set whose components do not need to be related.
#### Build List
```
my_list <- list(comp1, comp2 ...)
my_list <- list(name1 = your_comp1, 
                name2 = your_comp2)
```
The latter one creates a list with components that are named name1, name2, and so on. If you want to name your lists after you have created them, you can use the names() function as you did with vectors. The following commands are fully equivalent to the assignment above:
```
my_list <- list(your_comp1, your_comp2)
names(my_list) <- c("name1", "name2")
# Attention the first one do not need double quotation marks, while the second needs.
```

#### Extract
```
shining_list[[1]]
```
A quick way to check this out is typing it in the console. Important to remember: to select elements from vectors, you use single square brackets: [ ]. Don't mix them up!

You can also refer to the names of the components, with [[ ]] or with the \$ sign. Both will select the data frame representing the reviews:
```
shining_list[["reviews"]]
shining_list$reviews
```
#### Add Components
```
ext_list <- c(my_list , my_val)
```
This will simply extend the original list, my_list, with the component my_val. This component gets appended to the end of the list. If you want to give the new list item a name, you just add the name as you did before:
```
ext_list <- c(my_list, my_name = my_val)
```
### Data Frame
#### Rapid Overview
Both functions head() and tail() give a few observations of the data set/frame to help understanding the whole structure of the data.
more important, str() is a more frequent used function to extract the structure of data. For a data frame it tells you:

- The total number of observations (e.g. 32 car types)
- The total number of variables (e.g. 11 car features)
- A full list of the variables names (e.g. mpg, cyl ... )
- The data type of each variable (e.g. num)
- The first observations

#### Create a Data Frame
It is easy to create s data frame by function data.frame().
```
# Definition of vectors
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet", 
          "Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)

# Create a data frame from the vectors
planets_df <-data.frame(name,type,diameter,rotation,rings)
```
#### Extraction
It is the same as matrix to extract the elements of frame. But you can use names directly to extract elements without names() function (take care of variables are different columns in frame).

What's more, you can also \$ to express the columns with names. For example:
```
planets_df[,"diameter"]
planets_df$diameter 
```
are identical.

Subset is a wonderful function to pick qualified observations from your data set. You can pick the planets with rings so easily.
```
subset(planets_df, subset = rings)

# Select planets with diameter < 1
subset(planets_df, subset = diameter<1)
```

### Sort

Function order() is the best function to sort in R.
```
> a <- c(100, 10, 1000)
> order(a)
[1] 2 1 3

> a[order(a)]
[1]   10  100 1000

```
## Conditional Statement
```
if (condition) {
  expr1
} else {
  expr2
}

if (condition1) {
  expr1
} else if (condition2) {
  expr2
} else if (condition3) {
  expr3
} else {
  expr4
}
```


## R & Latex
R and Latex could be linked with the function Sweave(), from .rnw file to .tex file and then to .pdf file. The details are complicated, learning the code if necessary.

- [Basic Codes for Sweave]
- [How to use Latex in RStudio]
- [How to hide R code in Latex]
- [Build a Repeatable Research Procedure in Statistics]
- [Can't Find sweave.sty?(Chinese)]
- [Can't Find sweave.sty?(Stack Exchange)]

[Basic Codes for Sweave]:http://blog.csdn.net/leeshuheng/article/details/51319912
[How to use Latex in RStudio]:https://www.zhihu.com/question/28555518?sort=created

[How to hide R code in Latex]:http://blog.csdn.net/u011454283/article/details/50457853
[Build a Repeatable Research Procedure in Statistics]:https://cosx.org/2010/11/reproducible-research-in-statistics
[Can't Find sweave.sty?(Chinese)]:http://blog.sciencenet.cn/home.php?mod=space&uid=255662&do=blog&id=974941
[Can't Find sweave.sty?(Stack Exchange)]:https://tex.stackexchange.com/questions/153193/latex-error-sweave-sty-not-found



## R & Excel
### Sheet Data Transformed to Latex
It is so inconvenient to use Latex code writing the sheet data into a paper, which is not friendly to human and lessens the efficiency. The xtabel package is so great that it uses R to help transform the data into Latex code, whose introduction is this website [Write Latex Sheet with R].

[Write Latex Sheet with R]:http://blog.csdn.net/joshua_hit/article/details/60608787

```R
# You can try both libraries when one is in problem. 
library(foreign)  
mydata = read.spss("**.sav") 

library(haven)
dataset = read_sav(NULL)
View(dataset)
```


# Data Analysis and Visualization

[BIB]

~ End MainPanel